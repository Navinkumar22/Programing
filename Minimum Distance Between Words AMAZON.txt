Minimum Distance Between Words [AMAZON] 

A string S is passed as the input. Two words W1 and W2 which are present in the string S are also passed as the input. 
The program must find the minimum distance D between W1 and W2 in S (in forward or reverse order) and print D as the output. 
Input Format: The first line will contain S. The second line will contain W1. The third line will contain W2. 
Output Format: The first line will contain D - the minimum distance between W1 and W2 in S. 

Boundary Conditions: Length of S is from 5 to 200. 

Example Input/Output 1: 
Input:
the brown quick frog quick the 
the 
quick 

Output: 
1 
Explanation: quick and the are adjacent as the last two words. Hence distance between them is 1. 

Example Input/Output 2: 
Input:

the quick the brown quick brown the frog 
quick 
frog

output:
3


Program:
#include<stdio.h> 
#include<stdlib.h> 
#include<string.h> 
#include<limits.h> 
int main(){ 
	int l,k=0,m=INT_MAX; 
	char w1[101],w2[101],arr[100][10e],input[300]; 
	scanf("%[^\n]%n",input,&l);
	scanf("%s\n%s",w1,w2); 
	char *p=strtok(input," "); 
	while(p!NULL){ 
		strcpy(arr[k++],p); 
		p=strtok(NULL," ");
	} 
	
	for(int i=0;i<k;i++){ 
		int d=1,f=0;
		if(!strcmp(arr[i],w1)){ 
			for(int j=i+1;j<k;j++){ 
				if(!strcmp(arr[j],w2)){
					 f=1; 
					 break; 
				}else{ 
					d++;
				} 
			} 
			if(f==0){
				 d=1;
				for(int j=i-1;j>=0;j--){
					if(!strcmp(arr[j],w2)){
						 f=1;
						 break; 
					}else{
						d++;
					}
				} 
			}
		}
		if(d<m && f==1){
			m=d;
		}
	}
	printf("%d",m);

}